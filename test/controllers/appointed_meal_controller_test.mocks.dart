// Mocks generated by Mockito 5.4.4 from annotations
// in happ_eats/test/controllers/appointed_meal_controller_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:cloud_firestore/cloud_firestore.dart' as _i2;
import 'package:happ_eats/models/appointed_meal.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFirebaseFirestore_0 extends _i1.SmartFake
    implements _i2.FirebaseFirestore {
  _FakeFirebaseFirestore_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWriteBatch_1 extends _i1.SmartFake implements _i2.WriteBatch {
  _FakeWriteBatch_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AppointedMealRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppointedMealRepository extends _i1.Mock
    implements _i3.AppointedMealRepository {
  @override
  _i2.FirebaseFirestore get db => (super.noSuchMethod(
        Invocation.getter(#db),
        returnValue: _FakeFirebaseFirestore_0(
          this,
          Invocation.getter(#db),
        ),
        returnValueForMissingStub: _FakeFirebaseFirestore_0(
          this,
          Invocation.getter(#db),
        ),
      ) as _i2.FirebaseFirestore);

  @override
  _i4.Future<_i2.WriteBatch> createAppointedMeal(
    _i2.WriteBatch? batch,
    String? id,
    String? diet,
    String? professional,
    String? patient,
    DateTime? appointedDate,
    String? dish,
    String? dishName,
    int? mealOrder,
    Map<String, dynamic>? values,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #createAppointedMeal,
          [
            batch,
            id,
            diet,
            professional,
            patient,
            appointedDate,
            dish,
            dishName,
            mealOrder,
            values,
          ],
        ),
        returnValue: _i4.Future<_i2.WriteBatch>.value(_FakeWriteBatch_1(
          this,
          Invocation.method(
            #createAppointedMeal,
            [
              batch,
              id,
              diet,
              professional,
              patient,
              appointedDate,
              dish,
              dishName,
              mealOrder,
              values,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.WriteBatch>.value(_FakeWriteBatch_1(
          this,
          Invocation.method(
            #createAppointedMeal,
            [
              batch,
              id,
              diet,
              professional,
              patient,
              appointedDate,
              dish,
              dishName,
              mealOrder,
              values,
            ],
          ),
        )),
      ) as _i4.Future<_i2.WriteBatch>);

  @override
  _i4.Future<_i2.WriteBatch> signalIssuesAppointedMeal(
    _i2.WriteBatch? batch,
    String? id,
    String? note,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #signalIssuesAppointedMeal,
          [
            batch,
            id,
            note,
          ],
        ),
        returnValue: _i4.Future<_i2.WriteBatch>.value(_FakeWriteBatch_1(
          this,
          Invocation.method(
            #signalIssuesAppointedMeal,
            [
              batch,
              id,
              note,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.WriteBatch>.value(_FakeWriteBatch_1(
          this,
          Invocation.method(
            #signalIssuesAppointedMeal,
            [
              batch,
              id,
              note,
            ],
          ),
        )),
      ) as _i4.Future<_i2.WriteBatch>);

  @override
  _i4.Future<_i2.WriteBatch> consumedCorrectlyAppointedMeal(
    _i2.WriteBatch? batch,
    String? id,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #consumedCorrectlyAppointedMeal,
          [
            batch,
            id,
          ],
        ),
        returnValue: _i4.Future<_i2.WriteBatch>.value(_FakeWriteBatch_1(
          this,
          Invocation.method(
            #consumedCorrectlyAppointedMeal,
            [
              batch,
              id,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.WriteBatch>.value(_FakeWriteBatch_1(
          this,
          Invocation.method(
            #consumedCorrectlyAppointedMeal,
            [
              batch,
              id,
            ],
          ),
        )),
      ) as _i4.Future<_i2.WriteBatch>);

  @override
  _i4.Stream<_i2.QuerySnapshot<Object?>> getAllAppointmentsForToday(
    DateTime? date,
    String? id,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllAppointmentsForToday,
          [
            date,
            id,
          ],
        ),
        returnValue: _i4.Stream<_i2.QuerySnapshot<Object?>>.empty(),
        returnValueForMissingStub:
            _i4.Stream<_i2.QuerySnapshot<Object?>>.empty(),
      ) as _i4.Stream<_i2.QuerySnapshot<Object?>>);

  @override
  _i4.Stream<_i2.QuerySnapshot<Object?>> getAllAppointmentsStream(
    DateTime? dateStart,
    DateTime? dateEnd,
    String? id,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllAppointmentsStream,
          [
            dateStart,
            dateEnd,
            id,
          ],
        ),
        returnValue: _i4.Stream<_i2.QuerySnapshot<Object?>>.empty(),
        returnValueForMissingStub:
            _i4.Stream<_i2.QuerySnapshot<Object?>>.empty(),
      ) as _i4.Stream<_i2.QuerySnapshot<Object?>>);

  @override
  _i4.Future<_i2.WriteBatch> deleteAllUserMeals(
    _i2.WriteBatch? batch,
    String? id,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteAllUserMeals,
          [
            batch,
            id,
          ],
        ),
        returnValue: _i4.Future<_i2.WriteBatch>.value(_FakeWriteBatch_1(
          this,
          Invocation.method(
            #deleteAllUserMeals,
            [
              batch,
              id,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.WriteBatch>.value(_FakeWriteBatch_1(
          this,
          Invocation.method(
            #deleteAllUserMeals,
            [
              batch,
              id,
            ],
          ),
        )),
      ) as _i4.Future<_i2.WriteBatch>);
}
